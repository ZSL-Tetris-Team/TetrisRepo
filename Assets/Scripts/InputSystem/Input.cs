//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/Scripts/InputSystem/Input.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Input : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Input()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Input"",
    ""maps"": [
        {
            ""name"": ""Blocks"",
            ""id"": ""a0ba25c0-e34a-4c80-bac7-914982feed84"",
            ""actions"": [
                {
                    ""name"": ""Right"",
                    ""type"": ""Button"",
                    ""id"": ""561a374d-dd29-429a-bed1-f791dfe9710f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Left"",
                    ""type"": ""Button"",
                    ""id"": ""d693da7f-9a0d-4651-94da-8895947dd4f0"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""f9f4654c-907e-463b-9acc-2a980016462c"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": ""Blocks"",
                    ""action"": ""Right"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2daf0ec1-e9f3-410b-b7e2-c1cb42b8d155"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": ""Blocks"",
                    ""action"": ""Left"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Blocks"",
            ""bindingGroup"": ""Blocks"",
            ""devices"": []
        }
    ]
}");
        // Blocks
        m_Blocks = asset.FindActionMap("Blocks", throwIfNotFound: true);
        m_Blocks_Right = m_Blocks.FindAction("Right", throwIfNotFound: true);
        m_Blocks_Left = m_Blocks.FindAction("Left", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Blocks
    private readonly InputActionMap m_Blocks;
    private IBlocksActions m_BlocksActionsCallbackInterface;
    private readonly InputAction m_Blocks_Right;
    private readonly InputAction m_Blocks_Left;
    public struct BlocksActions
    {
        private @Input m_Wrapper;
        public BlocksActions(@Input wrapper) { m_Wrapper = wrapper; }
        public InputAction @Right => m_Wrapper.m_Blocks_Right;
        public InputAction @Left => m_Wrapper.m_Blocks_Left;
        public InputActionMap Get() { return m_Wrapper.m_Blocks; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(BlocksActions set) { return set.Get(); }
        public void SetCallbacks(IBlocksActions instance)
        {
            if (m_Wrapper.m_BlocksActionsCallbackInterface != null)
            {
                @Right.started -= m_Wrapper.m_BlocksActionsCallbackInterface.OnRight;
                @Right.performed -= m_Wrapper.m_BlocksActionsCallbackInterface.OnRight;
                @Right.canceled -= m_Wrapper.m_BlocksActionsCallbackInterface.OnRight;
                @Left.started -= m_Wrapper.m_BlocksActionsCallbackInterface.OnLeft;
                @Left.performed -= m_Wrapper.m_BlocksActionsCallbackInterface.OnLeft;
                @Left.canceled -= m_Wrapper.m_BlocksActionsCallbackInterface.OnLeft;
            }
            m_Wrapper.m_BlocksActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Right.started += instance.OnRight;
                @Right.performed += instance.OnRight;
                @Right.canceled += instance.OnRight;
                @Left.started += instance.OnLeft;
                @Left.performed += instance.OnLeft;
                @Left.canceled += instance.OnLeft;
            }
        }
    }
    public BlocksActions @Blocks => new BlocksActions(this);
    private int m_BlocksSchemeIndex = -1;
    public InputControlScheme BlocksScheme
    {
        get
        {
            if (m_BlocksSchemeIndex == -1) m_BlocksSchemeIndex = asset.FindControlSchemeIndex("Blocks");
            return asset.controlSchemes[m_BlocksSchemeIndex];
        }
    }
    public interface IBlocksActions
    {
        void OnRight(InputAction.CallbackContext context);
        void OnLeft(InputAction.CallbackContext context);
    }
}
